apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko-ap
  namespace: springweb
  labels:
    app.kubernetes.io/version: "0.5.ap"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds source into a container image using Google's kaniko tool.

    Kaniko doesn't depend on a Docker daemon and executes each
    command within a Dockerfile completely in userspace. This enables
    building container images in environments that can't easily or
    securely run a Docker daemon, such as a standard Kubernetes cluster.

  params:
  - name: CUSTOM_REGISTRY_SERVER
    description: Custom registry hostname eg. docker.io
  - name: IMAGE
    description: Name (reference) of the image to build.
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: The build context used by Kaniko.
    default: ./
  - name: EXTRA_ARGS
    type: array
    default: []
  - name: BUILDER_IMAGE
    description: The image on which builds will run (default is v1.5.1)
    default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
  - name: source
    description: Holds the context and docker file
  - name: dockerconfig
    description: Includes a docker `config.json`
    optional: true
    mountPath: /kaniko/.docker
  - name: dockersecret
    description: Includes docker registry username, password and host
    optional: true
  results:
  - name: IMAGE-DIGEST
    description: Digest of the image just built.

  steps:
  - name: build-docker-config
    workingDir: $(workspaces.dockerconfig.path)
    image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
    script: |
      #!/usr/bin/env bash

      if [ "$(workspaces.dockersecret.bound)" == "true" ] ; then
          echo "Docker secret bound"
          ls -all $(workspaces.dockersecret.path)/*
          export CUSTOM_REGISTRY_USERNAME=`cat $(workspaces.dockersecret.path)/username`
          export CUSTOM_REGISTRY_PASSWORD=`cat $(workspaces.dockersecret.path)/password`
      fi

      cat > $(workspaces.dockerconfig.path)/config.json << EOF
      {
        "auths": {
          "$(params.CUSTOM_REGISTRY_SERVER)": {
            "username" : "$CUSTOM_REGISTRY_USERNAME",
            "password" : "$CUSTOM_REGISTRY_PASSWORD"
          }
        }
      }
      EOF
      #ls -all $(workspaces.dockerconfig.path)/config.json
      #echo "App context: $(workspaces.source.path)/$(params.CONTEXT)"
      #ls -all $(workspaces.source.path)/$(params.CONTEXT)/target

  - name: build-and-push
    workingDir: $(workspaces.source.path)
    image: $(params.BUILDER_IMAGE)
    args:
    - $(params.EXTRA_ARGS[*])
    - --dockerfile=$(params.DOCKERFILE)
    - --context=$(workspaces.source.path)/$(params.CONTEXT)  # The user does not need to care the workspace and the source.
    - --destination=$(params.IMAGE)
    - --digest-file=/tekton/results/IMAGE-DIGEST
    # kaniko assumes it is running as root, which means this example fails on platforms
    # that default to run containers as random uid (like OpenShift). Adding this securityContext
    # makes it explicit that it needs to run as root.
    securityContext:
      runAsUser: 0
